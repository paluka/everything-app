datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts         Post[]
  conversations Participant[]
  messages      Message[]

  followers Follow[] @relation("followingRelation")
  following Follow[] @relation("followerRelation")

  followerCount  Int @default(0)
  followingCount Int @default(0)

  publicKey           String?
  encryptedPrivateKey String?
}

model Follow {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("followerRelation", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("followingRelation", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId]) // Ensure a user can't follow the same person multiple times
}

model Post {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Conversation {
  id           String        @id @default(cuid())
  participants Participant[]
  messages     Message[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Participant {
  id             String       @id @default(cuid())
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum MessageStatus {
  sent
  delivered
  read
  failed
}

model Message {
  id                          String        @id @default(cuid())
  conversationId              String
  senderId                    String
  encryptedContentForSender   String
  encryptedContentForReceiver String
  status                      MessageStatus @default(sent)
  conversation                Conversation  @relation(fields: [conversationId], references: [id])
  sender                      User          @relation(fields: [senderId], references: [id])
  createdAt                   DateTime      @default(now())
  updatedAt                   DateTime      @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}
